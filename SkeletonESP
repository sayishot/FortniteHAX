--[[

    Problem: If Player chooses to update from R6 to R15, it won't render for them.
    Solution: Making multiple drawing lines for both R6 and R15, then assigning it based on character type and hiding the other.
        Note: If R15 show R15 lines, Hide R6 lines

]]

local Players, RunService = game:GetService("Players"), game:GetService("RunService")
local Camera, LocalPlayer = workspace.CurrentCamera, Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local Framework = {
    Cache = {},
    Settings = {
        Skeletons = {
            Enabled = false,
            Color = Color3.fromRGB(255, 91, 91)
        }
    }
}; Framework.__index = Framework;

local function DrawLine()
    local l = Drawing.new("Line")
    l.Visible = false
    l.From = Vector2.new(0, 0)
    l.To = Vector2.new(1, 1)
    l.Color = Color3.fromRGB(255, 0, 0)
    l.Thickness = 1
    l.Transparency = 1
    return l
end

function Framework:GetLimbs(player)
    local limbs = {};
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        if player.Character.Humanoid.RigType == Enum.HumanoidRigType.R15 then
            limbs = {
                Head_UpperTorso = DrawLine(),
                UpperTorso_LowerTorso = DrawLine(),
                -- Left Arm
                UpperTorso_LeftUpperArm = DrawLine(),
                LeftUpperArm_LeftLowerArm = DrawLine(),
                LeftLowerArm_LeftHand = DrawLine(),
                -- Right Arm
                UpperTorso_RightUpperArm = DrawLine(),
                RightUpperArm_RightLowerArm = DrawLine(),
                RightLowerArm_RightHand = DrawLine(),
                -- Left Leg
                LowerTorso_LeftUpperLeg = DrawLine(),
                LeftUpperLeg_LeftLowerLeg = DrawLine(),
                LeftLowerLeg_LeftFoot = DrawLine(),
                -- Right Leg
                LowerTorso_RightUpperLeg = DrawLine(),
                RightUpperLeg_RightLowerLeg = DrawLine(),
                RightLowerLeg_RightFoot = DrawLine(),
            }
        else
            limbs = {
                Head_Spine = DrawLine(),
                Spine = DrawLine(),
                LeftArm = DrawLine(),
                LeftArm_UpperTorso = DrawLine(),
                RightArm = DrawLine(),
                RightArm_UpperTorso = DrawLine(),
                LeftLeg = DrawLine(),
                LeftLeg_LowerTorso = DrawLine(),
                RightLeg = DrawLine(),
                RightLeg_LowerTorso = DrawLine()
            }
        end
    end
    return limbs;
end

function Framework:SetVisibility(object, state)
    for _, o in pairs(object) do
        o.Visible = state
    end
end

function Framework:SetColor(object, color)
    for _, o in pairs(object) do
        o.Color = color
    end
end

function Framework:Render(player)
    if Framework.Settings.Skeletons.Enabled then

    repeat wait() until player.Character ~= nil and player.Character:FindFirstChild("Humanoid") ~= nil

    local Limbs = Framework:GetLimbs(player)
    Framework.Cache[player] = RunService.RenderStepped:Connect(function(deltaTime)
        local Data = Limbs;
        if LocalPlayer ~= player and player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health ~= 0 then
            local H, InBounds = Camera:WorldToViewportPoint(player.Character.Head.Position)

            if not InBounds then
                Framework:SetVisibility(Data, false)
                return;
            end

            Framework:SetColor(Data, Framework.Settings.Skeletons.Color)
            if Data["UpperTorso_LowerTorso"] ~= nil then
                --Spine
                local UT = Camera:WorldToViewportPoint(player.Character.UpperTorso.Position)
                local LT = Camera:WorldToViewportPoint(player.Character.LowerTorso.Position)
                -- Left Arm
                local LUA = Camera:WorldToViewportPoint(player.Character.LeftUpperArm.Position)
                local LLA = Camera:WorldToViewportPoint(player.Character.LeftLowerArm.Position)
                local LH = Camera:WorldToViewportPoint(player.Character.LeftHand.Position)
                -- Right Arm
                local RUA = Camera:WorldToViewportPoint(player.Character.RightUpperArm.Position)
                local RLA = Camera:WorldToViewportPoint(player.Character.RightLowerArm.Position)
                local RH = Camera:WorldToViewportPoint(player.Character.RightHand.Position)
                -- Left leg
                local LUL = Camera:WorldToViewportPoint(player.Character.LeftUpperLeg.Position)
                local LLL = Camera:WorldToViewportPoint(player.Character.LeftLowerLeg.Position)
                local LF = Camera:WorldToViewportPoint(player.Character.LeftFoot.Position)
                -- Right leg
                local RUL = Camera:WorldToViewportPoint(player.Character.RightUpperLeg.Position)
                local RLL = Camera:WorldToViewportPoint(player.Character.RightLowerLeg.Position)
                local RF = Camera:WorldToViewportPoint(player.Character.RightFoot.Position)

                Data.Head_UpperTorso.From = Vector2.new(H.X, H.Y)
                Data.Head_UpperTorso.To = Vector2.new(UT.X, UT.Y)

                --Spine
                Data.UpperTorso_LowerTorso.From = Vector2.new(UT.X, UT.Y)
                Data.UpperTorso_LowerTorso.To = Vector2.new(LT.X, LT.Y)

                -- Left Arm
                Data.UpperTorso_LeftUpperArm.From = Vector2.new(UT.X, UT.Y)
                Data.UpperTorso_LeftUpperArm.To = Vector2.new(LUA.X, LUA.Y)

                Data.LeftUpperArm_LeftLowerArm.From = Vector2.new(LUA.X, LUA.Y)
                Data.LeftUpperArm_LeftLowerArm.To = Vector2.new(LLA.X, LLA.Y)

                Data.LeftLowerArm_LeftHand.From = Vector2.new(LLA.X, LLA.Y)
                Data.LeftLowerArm_LeftHand.To = Vector2.new(LH.X, LH.Y)

                -- Right Arm
                Data.UpperTorso_RightUpperArm.From = Vector2.new(UT.X, UT.Y)
                Data.UpperTorso_RightUpperArm.To = Vector2.new(RUA.X, RUA.Y)

                Data.RightUpperArm_RightLowerArm.From = Vector2.new(RUA.X, RUA.Y)
                Data.RightUpperArm_RightLowerArm.To = Vector2.new(RLA.X, RLA.Y)

                Data.RightLowerArm_RightHand.From = Vector2.new(RLA.X, RLA.Y)
                Data.RightLowerArm_RightHand.To = Vector2.new(RH.X, RH.Y)

                -- Left Leg
                Data.LowerTorso_LeftUpperLeg.From = Vector2.new(LT.X, LT.Y)
                Data.LowerTorso_LeftUpperLeg.To = Vector2.new(LUL.X, LUL.Y)

                Data.LeftUpperLeg_LeftLowerLeg.From = Vector2.new(LUL.X, LUL.Y)
                Data.LeftUpperLeg_LeftLowerLeg.To = Vector2.new(LLL.X, LLL.Y)

                Data.LeftLowerLeg_LeftFoot.From = Vector2.new(LLL.X, LLL.Y)
                Data.LeftLowerLeg_LeftFoot.To = Vector2.new(LF.X, LF.Y)

                -- Right Leg
                Data.LowerTorso_RightUpperLeg.From = Vector2.new(LT.X, LT.Y)
                Data.LowerTorso_RightUpperLeg.To = Vector2.new(RUL.X, RUL.Y)

                Data.RightUpperLeg_RightLowerLeg.From = Vector2.new(RUL.X, RUL.Y)
                Data.RightUpperLeg_RightLowerLeg.To = Vector2.new(RLL.X, RLL.Y)

                Data.RightLowerLeg_RightFoot.From = Vector2.new(RLL.X, RLL.Y)
                Data.RightLowerLeg_RightFoot.To = Vector2.new(RF.X, RF.Y)
                Framework:SetVisibility(Data, true)
            else
                local T_Height = player.Character.Torso.Size.Y/2 - 0.2
                local UT = Camera:WorldToViewportPoint((player.Character.Torso.CFrame * CFrame.new(0, T_Height, 0)).p)
                local LT = Camera:WorldToViewportPoint((player.Character.Torso.CFrame * CFrame.new(0, -T_Height, 0)).p)

                local LA_Height = player.Character["Left Arm"].Size.Y/2 - 0.2
                local LUA = Camera:WorldToViewportPoint((player.Character["Left Arm"].CFrame * CFrame.new(0, LA_Height, 0)).p)
                local LLA = Camera:WorldToViewportPoint((player.Character["Left Arm"].CFrame * CFrame.new(0, -LA_Height, 0)).p)

                local RA_Height = player.Character["Right Arm"].Size.Y/2 - 0.2
                local RUA = Camera:WorldToViewportPoint((player.Character["Right Arm"].CFrame * CFrame.new(0, RA_Height, 0)).p)
                local RLA = Camera:WorldToViewportPoint((player.Character["Right Arm"].CFrame * CFrame.new(0, -RA_Height, 0)).p)

                local LL_Height = player.Character["Left Leg"].Size.Y/2 - 0.2
                local LUL = Camera:WorldToViewportPoint((player.Character["Left Leg"].CFrame * CFrame.new(0, LL_Height, 0)).p)
                local LLL = Camera:WorldToViewportPoint((player.Character["Left Leg"].CFrame * CFrame.new(0, -LL_Height, 0)).p)

                local RL_Height = player.Character["Right Leg"].Size.Y/2 - 0.2
                local RUL = Camera:WorldToViewportPoint((player.Character["Right Leg"].CFrame * CFrame.new(0, RL_Height, 0)).p)
                local RLL = Camera:WorldToViewportPoint((player.Character["Right Leg"].CFrame * CFrame.new(0, -RL_Height, 0)).p)

                -- Head
                Data.Head_Spine.From = Vector2.new(H.X, H.Y)
                Data.Head_Spine.To = Vector2.new(UT.X, UT.Y)

                --Spine
                Data.Spine.From = Vector2.new(UT.X, UT.Y)
                Data.Spine.To = Vector2.new(LT.X, LT.Y)

                --Left Arm
                Data.LeftArm.From = Vector2.new(LUA.X, LUA.Y)
                Data.LeftArm.To = Vector2.new(LLA.X, LLA.Y)

                Data.LeftArm_UpperTorso.From = Vector2.new(UT.X, UT.Y)
                Data.LeftArm_UpperTorso.To = Vector2.new(LUA.X, LUA.Y)

                --Right Arm
                Data.RightArm.From = Vector2.new(RUA.X, RUA.Y)
                Data.RightArm.To = Vector2.new(RLA.X, RLA.Y)

                Data.RightArm_UpperTorso.From = Vector2.new(UT.X, UT.Y)
                Data.RightArm_UpperTorso.To = Vector2.new(RUA.X, RUA.Y)

                --Left Leg
                Data.LeftLeg.From = Vector2.new(LUL.X, LUL.Y)
                Data.LeftLeg.To = Vector2.new(LLL.X, LLL.Y)

                Data.LeftLeg_LowerTorso.From = Vector2.new(LT.X, LT.Y)
                Data.LeftLeg_LowerTorso.To = Vector2.new(LUL.X, LUL.Y)

                --Right Leg
                Data.RightLeg.From = Vector2.new(RUL.X, RUL.Y)
                Data.RightLeg.To = Vector2.new(RLL.X, RLL.Y)

                Data.RightLeg_LowerTorso.From = Vector2.new(LT.X, LT.Y)
                Data.RightLeg_LowerTorso.To = Vector2.new(RUL.X, RUL.Y)
                Framework:SetVisibility(Data, true)
            end
        else
            
            Framework:SetVisibility(Data, false)
        end
    end)

    Framework.Cache[player] = Limbs;
end

function Framework:Derender(player)
    if not Framework.Cache[player] then return end

    for i, v in next, Framework.Cache[player] do
        if i == "Connection" then
            v:Disconnect()
        elseif typeof(v) ~= "table" then
            v:Remove()
        end
    end
end

for _, p in next, Players:GetPlayers() do
    Framework:Render(p)
end

Players.PlayerAdded:Connect(function(player)
    Framework:Render(player)
end)

Players.PlayerRemoving:Connect(function(player)
    Framework:Derender(player)
end)
